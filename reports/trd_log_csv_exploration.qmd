---
title: "trd_log_csv_exploration"
author: "Andrea Pedot"
format: html
editor: visual
---

## Introduzione

```{r}
library(tidyverse)
library(readxl)
library(lubridate)
```

I file principali utilizzati nello studio sono 4

-   il file excel "pt_names dati inclusione", che contiene una riga per paziente, con il successo o l'insuccesso del tentativo di svezzamento

-   il file excel "pt_registry dati giornalieri", che contiene una riga al giorno per paziente, che contiene i dati raccolti clinicamente oppure quelli da analisi di laboratorio (es. prelievo di sangue arterioso) e la storia clinica limitatamente a data di ricovero ospedaliero, in ICU, svezzamento, reintubazione, comparsa di complicanze e fine del ricovero

-   il file "TRD", aggegato in uno per paziente, che contiene una riga per minuto per paziente, contiene i dati registrati dal ventilatore, limitatamente allo stato del paziente

-   il file "LOG" aggegato in uno per paziente, che contiene una riga per minuto per paziente, contiene i dati registrati dal ventilatore, limitatamente ai segnali, gli allarmi e ai parametri che vengono impostati

Da questi dati è possibile ricostruire la storia di ogni tentativo di SBT o Trial di Respiro Spontaneo (potenzialmente anche molti per paziente, uno al giorno fino a quello di successo che porta allo svezzamento dal ventilatore).

L'ipotesi sperimentale che si vuole testare è se un modello sia in grado di offrire una performance soddisfacente nel predire l'esito del SBT dai dati raccolti nelle 24h che lo precedono.

## Pazienti inclusi

Dei 180 pazienti inclusi nello studio sono registrate le colonne che lo descrivono, in cui "id_univoco" contiene la chiave di associazione presente anche negli altri file.

Rilevanti come variabili che non cambiano durante il ricovero, potenzialmente utili per un'analisi successiva:

-   variabili demografiche come "sesso", "anni_eta", "kg_peso", "cm_altezza", "bmi" e "ibw"

-   le ragioni d'inizio della ventilazione meccanica in "name reason_mv"

-   date rilevanti come "data_ricovero ospedaliero", "data_ricovero_terapia intensiva", "data_inizio ventilazione meccanica", "data_fine ventilazione meccanica", "data_out_ti", "data_dimissione"

Mentre le altre colonne contengono variabili ridondanti, derivate oppure disponibili solo alla fine del ricovero del paziente.

```{r}
path_input <- paste(Sys.getenv('PRJ_SHARED_PATH'),
                    Sys.getenv('INPUT_DATA_FOLDER'),
                    sep = "\\")

pt_names <- read_xlsx( path = paste(path_input,
                                    "pt_names dati inclusione.xlsx",
                                    sep = "\\"),
                       sheet = "pt_names",
                       guess_max = 5) |>
  select("id_pt",
         "id_univoco",
         "ospedale",
         "type",
         "sesso",
         "anni_eta",
         "kg_peso",
         "cm_altezza",
         "bmi", "ibw",
         "name reason_mv",
         starts_with("data"),
         starts_with("esito")) |> 
  select(-"data_reclutamento") |> 
  rename(reason = `name reason_mv` ,
         osp_in = `data_ricovero ospedaliero`,
         icu_in = `data_ricovero_terapia intensiva`,
         vm_inizio = `data_inizio ventilazione meccanica`,
         vm_fine = `data_fine ventilazione meccanica`,
         icu_out = data_out_ti,
         osp_out = data_dimissione,
         esito = `esito_osp 0 non impostato 1 dimesso 2 deceduto icu 3 deceduto osp`) |> 
  mutate(type = as_factor(type),
         sesso = as_factor(sesso),
         bmi = as.double(bmi),
         ibw = as.double(ibw),
         reason = as_factor(reason),
         esito = as_factor(esito))  |>
  mutate(osp_in = as_date(osp_in),
         icu_in = as_date(icu_in),
         vm_inizio = as_date(vm_inizio),
         vm_fine = as_date(vm_fine),
         osp_out = as_date(osp_out),
         icu_out = as_date(icu_out))
```

```{r}
glimpse(pt_names)
```

A titolo esplorativo, si mostra la distribuzione dei giorni di ricovero, di terapia intensiva e di ventilazione meccanica

```{r}
ggplot(pt_names) +
  geom_histogram(aes(osp_out - osp_in),
                 fill = "red", alpha = 0.3) +
  geom_histogram(aes(icu_out - icu_in),
                 fill = "blue", alpha = 0.3) +
  geom_histogram(aes(vm_fine - vm_inizio),
                 fill = "green", alpha = 0.3) +
  facet_wrap(~esito)
```

## Registro giornaliero dei pazienti

Tenendo a mente che in una giornata si svolge al più un SBT, l'obiettivo è quello di costruire per ogni paziente che rispetta i criteri della tabella 1 (che rispondono alla domanda "sospetto che il paziente possa essere pronto per un SBT?"), una riga che contenga tutti i dati delle 24 precedenti e il risultato.

Si noti come in questo caso la probabilità sia condizionata sulla risposta positiva alla valutazione clinica, visto che l'SBT non viene eseguito se non dietro decisione del medico.

Le variabili d'interesse sono:

-   "id_registry"

-   "id_univoco", che è chiave in comune con il file excel dei pz inclusi

-   "deleted", che permette di individuare le righe che contengono dati errati o incompleti

-   "data_lettura" identifica la data alla quale il tentativo si riferisce

-   le variabili che iniziano con "ega" contengono dati sull'emogasanalisi (ma non si riesce a determinare se prima o dopo l'SBT)

-   le colonne che hanno come descrizione "weaning" e "SBT criteri di interruzione" contengono i parametri delle tabelle 1 (pre-SBT) e 2 (post-SBT)

-   la variabile di esito "estubato" contiene informazioni sullo stato d'estubazione (non sull'azione), mentre la variabile "reintubato" contiene informazioni sull'azione di reintubazione (non sullo stato)

```{r, echo=FALSE}
pt_registry <- read_xlsx(paste(path_input,
                               "pt_registry dati giornalieri.xls.xlsx",
                               sep = "\\"),
        sheet = "pt_registry",
        skip = 1, 
        col_types =  c("text", "numeric", "numeric", 
                       "skip", "skip", "skip", "text", "numeric", 
                       "skip", "skip", "date", "text", 
                       "text", "text", "numeric", 
                       "numeric", "skip", "skip", "skip", 
                       "skip", "skip", "skip", "logical", 
                       "skip", "logical", "logical", "skip", 
                       "skip", "skip", "skip", "logical", "logical", 
                       "logical", "logical", "logical", "logical", "logical", 
                       "logical", "logical", "logical", "logical", #fine suspect criteria
                       "logical", "logical", "logical",
                       "logical", "logical", "logical", #fine stop criteria
                       "logical", "logical", "logical",
                       "logical", "logical", "logical", "logical", "skip",
                       "logical", "logical", "logical", #fine fail criteria
                       "skip", "skip", "skip", "skip", 
                       "skip", "skip", "skip", "skip", "skip", 
                       "skip", "skip", "skip", "skip", "skip", 
                       "skip", "skip", "skip", "skip"),
        col_names = c("type", "id_registry", "filter_deleted", "id_univoco", "id_medico",
                     "data_lettura", "ega_ph","egA_pao2", "ega_paco2", "sofa", "cpis",
                     "estubato", "reintubato", "morto",
                     "susp_aspir", "susp_tosse", "susp_gcs", "susp_fcpas", "susp_drugs",
                     "susp_pafi", "susp_peep", "susp_vt", "susp_rr", "susp_distress", "susp_ph",
                     "susp_rass", "stop_fr", "stop_distress", "stop_spo2",
                     "stop_pas", "stop_fc", "stop_rass",
                     "fail_agit", "fail_coma", "fail_muscoli",
                     "fail_dispnea", "fail_rrvt", "fail_pao2",
                     "fail_ph", "fail_paco2", "fail_sbp")) |>
  filter(filter_deleted == 0) |>
  mutate(type = as_factor(type),
         data_lettura = as_date(data_lettura)
         # TO FIX: "EGA variables as numeric, problema è la virgola, per ora sono chr
         )
```

```{r}
glimpse(pt_registry)
```

```{r}
pt_registry <- pt_registry |>
  group_by(id_univoco) |>
  mutate(giorno_studio = data_lettura-first(data_lettura)) |>
  ungroup()

pt_registry <- pt_registry %>%
  select(starts_with("susp_")) %>%
  transmute(susp_tot = rowSums(across(everything()))) %>%
  bind_cols(pt_registry, .)

pt_registry |>
  select(id_univoco, susp_tot, giorno_studio) |>
  ggplot(aes(x = giorno_studio,
             y = susp_tot)) +
  geom_density_2d(color = "gray") +
  geom_smooth()
```

## File TRD

Ogni ventilatore mentre è attaccato al paziente, registra dei dati ogni minuto, somma o media (dipende dalla variabile), mentre i dati LOG registrano parametri e allarmi associandoli al momento in cui avvengono.

Si seleziona, nel paziente BS_008, un giorno di svezzamento. Per trovarlo, si filtra il registro giornaliero dei pazienti.

```{r}
pt_registry |>
  dplyr::filter(
    id_univoco == "BS008",
    susp_tot == 12
  ) |>
  dplyr::select(data_lettura, estubato, reintubato)
```

A questo punto è possibile procedere all'importazione dei file e a selezionarle unicamente 24h in cui è avvenuto lo svezzamento.

```{r}
paz <- c( ospedale = "BS",
          paziente = 8)

trd <- tar_read(weaningsTRD) |> 
  filter( folder == paz["ospedale"],
          id_pat == paz["paziente"]) # giorno di svezzamento

```

A questo punto è possibile aprire i dati e verificare cosa contengono.

Innanzitutto si plottano tutte le variabili vs l'ora, così da identificare quelle che mostrano un cambiamento durante uno SBT.

```{r}
trd %>%
  filter(date == "2013-11-27") %>%
  select_if( function(x) {!all(is.na(x))} ) %>%
  gather(-ora, key = "var", value = "value") %>% 
  ggplot(aes(x = ora,
             y = value)) +
    geom_point(size = 0.5) +
    facet_wrap(~ var, scales = "free")
```

Da cui si ricava che quelle più interessanti sono:

-   lavoro respiratorio del ventilatore (del pz è meno rilevante)

-   pressione di picco delle vie aeree

-   pressione media delle vie aeree

-   pressione di fine espirazione

```{r}
trd |>
ggplot() +
  geom_line(aes(ora, pressione_di_fine_esp_cm_h2o)) +
  geom_line(aes(ora, lavoro_respiratorio_del_paziente_joule_l),
            color = "blue") +
  facet_wrap(~date)
```

I tentativi di SBT si sospetta che siano quei momenti in cui per circa 30m i parametri si modificano in modo significativo.

## File Log

```{r}
`%ni%` <- Negate(`%in%`)
log <- tar_read(weaningsLOG) |> 
  filter( folder == paz["ospedale"],
          id_pat == paz["paziente"],
          data   == "2013-12-08") # giorno di svezzamento
```

Del quale sono interessanti alcune "informazioni" particolari:

-   con codice 0 : "standby" che identifica il momento in cui si spegne il ventilatore (e "inizio ventilazione" che ne è la ripresa)

-   con codice 267: "pressione sopra PEEP" sembra identificare una delle azioni che avvengono immediatamente prima oppure durante un SBT (ma non solo)

## Un esempio: il paziente TS015

Come esempio, iniziamo da uno slice di dati relativi unicamente a questo paziente.

```{r}
ts15_names <- pt_names |>
  filter(id_univoco == "TS015")
glimpse(ts15_names)
```

```{r}
ts15_registry <- pt_registry |>
  filter(id_univoco == "TS015")
ts15_registry |>
  select(data_lettura, estubato, susp_tot)
```

Il pz viene estubato dopo 3 giorni nello studio (attenzione: si parte da 0 al ricovero), non appena raggiung un valore complessivo di readiness di 12/12. Si deduce dal fatto che viene estubato lo stesso giorno, che l'SBT ha avuto successo.

```{r}
paz <- c( ospedale = "TS",
          paziente = 15)

ts15_trd <- tar_read(weaningsTRD) |> 
  filter( folder == paz["ospedale"],
          id_pat == paz["paziente"])

ts15_log <- tar_read(weaningsLOG) |> 
  filter( folder == paz["ospedale"],
          id_pat == paz["paziente"])
```
