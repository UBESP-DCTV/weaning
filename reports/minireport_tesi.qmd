---
title: "Minireport tesi"
author: "AP"
format:
  html:
    embed-resources: true
    code-fold: true
    code-summary: "Show the code"
  docx:
    prefer-html: true
    embed-resources: true
editor: visual
---

## Obiettivo

Questo report contiene alcune analisi e tabelle utili alla tesi, in particolare:

1.  n pat (cohort size) and time span

2.  tot days, min/max I/II/II quartile days/pat

3.  tot SBT, min/max/ I/II/III quartile SBT/paz

4.  min/max I/II/III quartile SBT riusciti / SBT provati per paziente (e overall)

Ma anche, per la parte dei metodi "Describe the basic statistics of the dataset, particularly of the response variable. These include the ratio of positive to negative classes for a classification problem and the distribution of the response variable for regression problem".

## Caricamento pacchetti

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r}
if (!interactive()) {
  options(tidyverse.quiet = TRUE)
}
library(tidyverse)
library(targets)
library(gtsummary)
library(networkD3)
```

e i targets

```{r}
tar_visnetwork(TRUE, exclude = starts_with("gg") | contains("Plot"))
```

```{r}
baseline <- tar_read(pt_names) |>
  select("id_univoco", "type", "sesso", "anni_eta", "bmi", "ibw", "saps", "reason", "vm_inizio", "vm_fine") |>
  mutate(reason = reason |>
           fct_recode(
             "Sepsis" = "Sepsi",
             "Pneumonia" = "Polmonite",
             "Post-surgical complications" = "Complicanze Postoperatorie",
             "Heart Failure" = "Scompenso Cardiaco",
             "COPD exacerbation" = "BPCO Riacutizzata",
             "Other" = "Altro (specificare)",
             "Trauma - Polytrauma" = "Trauma - Politrauma"
             # ARDS doesn't need recoding
           ))

daily <- tar_read(pt_registry) |>
  select("id_univoco", "type", "data_lettura", "giorno_studio", 
         "sbt") |>
    # sbt :=
    #   - se stubato = `-1`,
    #   - se sbt non provato =  `0`,
    #   - se sbt riuscito =  `1`,
    #   - se sbt fallito =  `2`
  mutate(sbt = sbt |>
           as.character() |>
           fct_recode(
             "Already extubated" = "-1",
             "SBT not attempted" = "0",
             "SBT success" = "1",
             "SBT failure" = "2"
           )
  )
```

## Pazienti totali nello studio

```{r}
baseline |>
  select(-id_univoco, -starts_with("vm")) |>
  tbl_summary(
    label = list( type ~ "Ventilation mode",
                  sesso ~ "Gender",
                  anni_eta ~ "Age (years)",
                  reason ~ "Reason for MV",
                  bmi ~ "BMI",
                  ibw ~ "Ideal Body Weight",
                  saps ~ "SAPS score")
  )
```

```{r}
baseline |>
  select(starts_with("vm")) |>
  tbl_summary(
    label = list(
      vm_inizio ~ "MV start",
      vm_fine ~ "MV end"
    ),
    statistic = ~ "{min}, {max}"
  )
```

## Giorni nello studio

```{r}
daily_first <- tar_read(pt_registry) |>
    dplyr::select(
      sofa, susp_tot, dplyr::starts_with("ega_")
    )  |>
  tbl_summary(
    label = list(
      ega_ph ~ "EGA pH",
      ega_pao2 ~ "EGA PaO2",
      ega_paco2 ~ "EGA PaCO2",
      sofa ~ "SOFA score",
      susp_tot ~ "Readiness Testing score"
    ),
    digits =  ega_ph ~ 2
  )

daily_second <- daily |>
  group_by(id_univoco) |>
  summarise(giorno_finale = max(giorno_studio)) |>
  select(giorno_finale) |>
  tbl_summary(
    label = giorno_finale ~ "Day of study",
    statistic = ~ "{median}  (range: {min}, {max})  (IQR: {p25}, {p75})",
    # digits = ~ 2
  )

tbl_stack(list(daily_first, daily_second))
```

TRD MV data

```{r}
trd <- tar_read(weaningsTRD)

trd |>
  select(-c("id_univoco", "file", "date", "ora",
      "stress_index", "et_co2_percent", "eliminazione_co2_corrente_ml",
      "eliminazione_co2_minuto_ml_min", "elastanza_cm_h2o_l",
      "resistenza_esp_cm_h2o_l_s", "resistenza_inspiratoria_cm_h2o_l_s",
      "press_di_pausa_vie_aeree_cm_h2o", "compliance_statica_ml_cm_h2o",
      "perdita_percentuale_percent", "et_co2_mm_hg")) |>
  rename(
    "dynamic characteristics" = "caratteristiche_dinamiche_ml_cm_h2o",
    "end-expiratory flow" = "flusso_di_fine_esp_l_min",
    "positive end-expiratory flow" = "pressione_di_fine_esp_cm_h2o",
    "minute expired volume" = "vol_minuto_espirato_l_min",
    "current expired volume" = "vol_corrente_espirato_ml",                   
    "O2 saturation %" = "concentraz_o2_percent",
    "minute inspired volume" = "vol_minuto_inspirato_l_min",                 
    "current inspired volume" = "vol_corrente_inspirato_ml",
    "mean airway pressure" = "press_media_vie_aeree_cm_h2o",               
    "measured respiratory rate" = "frequenza_respiraz_misurata_resp_min",
    "sponteneous respiratory rate" = "freq_spontanea_resp_min",      
    "Edi peak" = "picco_edi_m_v",
    "Edi min" = "edi_min_m_v",                             
    "plateau pressure" = "press_di_picco_delle_vie_aeree_cm_h2o",
    "backup switches" = "passa_a_backup_min",                         
    "backup percent" = "backup_percent_min",
    "P 0.1" = "p_0_1_cm_h2o",                               
    "mechanical ventilator respiratory work" =
      "lavoro_respiratorio_del_ventilatore_joule_l",
    "patient ventilator respiratory work" = "lavoro_respiratorio_del_paziente_joule_l",   
    "spontaneous breathing index" = "sbi",
    "spontaneous minute expired volume" = "volume_minuto_espirato_spontaneo_l_min"     
  ) |>
  tbl_summary(
    digits = ~ 2,
    missing = "no"
  )
```

## SBT nello studio

```{r}
daily |>
  filter( sbt %in% c("SBT success", "SBT failure")) |>
  mutate( sbt = fct_drop(sbt)) |>
  group_by(id_univoco) |>
  count(sbt) |>
  # pivot_wider(names_from = sbt,
  #             values_from = n,
  #             values_fill = 0) |>
  ungroup() |>
  select(-id_univoco) |>
  tbl_summary( 
    by = sbt,
    statistic =  ~ "{median}  (range: {min}, {max})  (IQR: {p25}, {p75})",
    # digits =  ~ 2
  ) |>
  add_overall( col_label = "Totale")
```

## Analisi dell'outcome variable

```{r}

sbt_yes <- daily |> filter(sbt == "SBT success") |>
  tally() |> as.integer()
sbt_no <- daily |> filter(sbt == "SBT failure") |>
  tally() |> as.integer()
rt_yes <- sbt_yes + sbt_no
rt_no <- daily |> filter(sbt == "Readiness Testing failure") |> 
  tally()  |>   as.integer()
all_attempts <- rt_yes + rt_no

# collater input
diagram_links <- tribble(
  ~source,           ~target,           ~value,
  "all attempts",    "RT success",      rt_yes,
  "all attempts",    "RT failure",      rt_no,
  "RT success",      "SBT success",     sbt_yes,
  "RT success",      "SBT failure",     sbt_no
)

diagram_nodes <- tibble(
  name = c(
    as.character(diagram_links[["source"]]), 
    as.character(diagram_links[["target"]])) |>
    unique()
)

diagram_links[["IDsource"]] <- match(
  diagram_links[["source"]], diagram_nodes[["name"]])-1 
diagram_links[["IDtarget"]] <- match(
  diagram_links[["target"]], diagram_nodes[["name"]])-1

# prepare colour scale
ColourScal ='d3.scaleOrdinal() .range(["#FDE725FF","#B4DE2CFF","#6DCD59FF","#35B779FF","#1F9E89FF","#26828EFF","#31688EFF","#3E4A89FF","#482878FF","#440154FF"])'

sankeyNetwork(Links = diagram_links,
              Nodes = diagram_nodes,
              Source = "IDsource", 
              Target = "IDtarget",
              Value = "value",
              NodeID = "name", 
              sinksRight=FALSE,
              colourScale = ColourScal,
              nodeWidth=30, fontSize=15, nodePadding=20)

```

```{r}
daily |>
  select(sbt) |>
  tbl_summary(
    label = sbt ~ "Daily attempt"
  )
```
