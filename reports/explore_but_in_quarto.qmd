---
title: "Explore but in quarto"
author: "AP"
format:
  html:
    embed-resources: true
    code-fold: true
    code-summary: "Show the code"
editor: visual
---

## Preliminary preprocessing

```{r}
library(tidyverse)
library(gtsummary)
library(targets)
library(yardstick)
# install.packages("familiar", dependencies = TRUE)
library(familiar)

test_ids <- tar_read(idsTest)

baseline <- tar_read(pt_names) |>
  mutate( test_set = id_univoco %in% test_ids)
daily <- tar_read(pt_registry) |>
  mutate( test_set = id_univoco %in% test_ids) |>
  filter(sbt != -1)
trd <- tar_read(weaningsTRD) |>
  mutate( test_set = id_univoco %in% test_ids)
```

## Test set check

-   Baseline differences

-   Daily differences (all but study days)

-   Daily differences ( study days)

-   TRD differences

New version (density plot)

```{r}
tar_read(test_set_check)
```

## Dummy models

-   Model 0 always predict Class 0
-   Model 1 always predict Class 1
-   Model 2 always predict Class 2

```{r}
observed <- daily |>
  select(sbt) |>
  unlist()

pred_obs <- tibble(
  observed,
  pred0 = rep_len(0, length.out = length(observed)),
  pred1 = rep_len(1, length.out = length(observed)),
  pred2 = rep_len(2, length.out = length(observed))
  
)

#example
table(pred_obs$pred0, pred_obs$observed)
```

-   Model 3 predicts with random classes
-   Model 4 predicts random with observed class frequencies

```{r}
daily |>
  select(sbt, test_set) |>
  tbl_summary(
    by = test_set,
    label = sbt ~ "Daily attempt"
  ) |>
  add_p() |>
  add_q()

set.seed(4242)
pred_obs <- pred_obs |>
  mutate(
    pred3 = sample(0:2, size = length(observed), replace = TRUE),
    pred4 = sample(
      0:2,
      size = length(observed),
      replace = TRUE,
      prob = c(78,12,10)
    )
  )
```

Model 5 predicts with baseline and daily input

```{r, message=FALSE}
dailydata <- daily |>
  select(id_univoco,
         starts_with("ega"),
         sofa,
         susp_tot,
         giorno_studio,
         sbt,
         test_set) |>
  left_join(
    y = baseline |>
      select(
        id_univoco,
        type,
        sesso,
        anni_eta,
        bmi,
        ibw,
        saps,
        reason
      ),
    by = "id_univoco"
  )

model5 <- summon_familiar(
  data = dailydata,
  experiment_dir = file.path(here::here(), "familiar_xgboost"),
  validation_batch_id = "test_set",
  experimental_design = "cv(fs+mb,10,1)",
  sample_id_column = "id_univoco",
  outcome_type = "multinomial",
  outcome_column = "sbt",
  fs_method = "mrmr",
  learner = c("xgboost_tree"),
  evaluation_metric = c("accuracy", "balanced_accuracy", "precision"),
  imputation_method = "simple"
  )

# plots <- familiar::plot_model_performance(
#   object = familiar_1,
#   data = filter(dailydata, test_set == TRUE),
#   metric = c("accuracy", "balanced_accuracy", "precision")
#   )
# 
# plots[[1]]
```

Custom score function

```{r}
mv_cost <- tribble(
  ~truth,   ~estimate, ~cost,
  "1", "0",  1,
  "2", "0",  1,
  "2", "1",  1
)
```

Metric evaluation

```{r}
pred_obs |>
  select(pred4, observed) |>
  rename(predicted = pred4) |>
  metric_table()
```

Metric evaluation all at once

```{r, eval = FALSE}
# WORK in progress
model_list <- tribble(
  ~name,   ~model,
  "All 0", "pred0",
  "All 1", "pred1",
  "All 2", "pred2",
  "Random", "pred3",
  "Balanced random", "pred4",
)

map_reduce(model_list, function(.name, .model) {
  pred_obs |>
  multi_metric(
    truth = observed, 
    estimate = .model,
    estimator = "macro_weighted") |>
  rename(.name = .estimate) |>
  bind_cols()
})
  
pred_obs |>
  multi_metric(
    truth = observed, 
    estimate = pred0,
    estimator = "macro_weighted") |>
  rename("All 0" = .estimate)
 
```

## Load Keras models

```{r}
library(keras)

# Load model
e19a78 <- load_model_hdf5("C:/R/weaning/models/models_epoch-19_acc_0.78.hdf5", custom_objects = NULL, compile = TRUE)

# Preparing test data
batch_size <- 32
ids_test <- tar_read(idsTest)
db_test_raw <- tar_read(dbTest)

means_baseline <- get_means(db_test_raw, "baseline")
means_daily <- get_means(db_test_raw, "daily")
means_trd <- get_means(db_test_raw, "trd")
sd_baseline <- get_sd(db_test_raw, "baseline")
sd_daily <- get_sd(db_test_raw, "daily")
sd_trd <- get_sd(db_test_raw, "trd")

db_test <- db_test_raw |>
  normalize_baseline(means_baseline, sd_baseline) |>
  normalize_daily(means_daily, sd_daily) |>
  normalize_trd(means_trd, sd_trd)

test_generator <- create_batch_generator(db_test, batch_size)
test_n_batches <- db_test |>
  purrr::map_int(~ceiling(length(.x[["ids"]]) / batch_size)) |>
  sum()
rm(db_test, db_test_raw)

# Predict
preds <- predict(
  object = e19a78,
  x = test_generator,
  batch_size = batch_size,
  steps = test_n_batches
  )
```

\
